---
- hosts:
    - ffp_gw

  collections:
    - devsec.hardening
    - freifunk_potsdam.gluon

  roles:
    - weareinteractive.users
    - Frzk.nftables
    - stuvusit.systemd-journald
    - hafu.systemd_timesyncd
    - ssh_hardening
    - prometheus.prometheus.node_exporter
    # collection: freifunk_potsdam.gluon
    - system_packages
    - default_network
    - policy_routing
    - wireguard_client
    - batman_adv
    - gw2gw_l2tp
    - fastd_server
    - isc_dhcp_server
    - bind_server
    - radvd

  pre_tasks:

    - name: Allow users in group sudo to switch without password
      ansible.builtin.lineinfile:
        path: /etc/sudoers
        state: present
        regexp: '^%sudo\sALL='
        line: '%sudo ALL=(ALL) NOPASSWD: ALL'
        validate: /usr/sbin/visudo -cf %s

    - name: Remove tunneldigger client configuration
      block:
        - name: Check for tunneldigger service file
          register: tunneldigger_service_file_stat
          ansible.builtin.stat:
            path: "/etc/systemd/system/{{ tunneldigger_client_service_file_base_name | default('tunneldigger-client') }}.service"

        - name: Stop and disable tunneldigger service
          ansible.builtin.systemd:
            service: "{{ tunneldigger_client_service_file_base_name | default('tunneldigger-client') }}.service"
            state: stopped
            enabled: false
          when: tunneldigger_service_file_stat.stat.exists
          notify:
            - Restart systemd-networkd

        - name: Remeove service and network file
          ansible.builtin.file:
            path: "{{ item }}"
            state: absent
          loop:
            - "/etc/systemd/system/{{ tunneldigger_client_service_file_base_name | default('tunneldigger-client') }}.service"
            - "/etc/systemd/network/60-{{ tunneldigger_client_ifname | default('tunneldigger-client') }}.network"
          notify:
            - Restart systemd-networkd

  tasks:

    # caddy
    - name: Install caddy dependencies
      ansible.builtin.package:
        name:
          - debian-keyring
          - debian-archive-keyring
          - apt-transport-https
          - curl
        state: present

    - name: Get caddy gpg key
      ansible.builtin.get_url:
        url: https://dl.cloudsmith.io/public/caddy/stable/gpg.key
        dest: /usr/share/keyrings/caddy-stable-archive-keyring.gpg.download

    - name: Convert gpg key
      ansible.builtin.shell:
        cmd: "cat /usr/share/keyrings/caddy-stable-archive-keyring.gpg.download \
              | gpg --dearmor -o - > /usr/share/keyrings/caddy-stable-archive-keyring.gpg"

    - name: Add caddy apt repository
      ansible.builtin.apt_repository:
        filename: caddy-stable.list
        repo: "deb [signed-by=/usr/share/keyrings/caddy-stable-archive-keyring.gpg] https://dl.cloudsmith.io/public/caddy/stable/deb/debian any-version main"
        state: present

    - name: Install caddy
      ansible.builtin.package:
        name:
          - caddy
        state: present
      when: not ansible_check_mode
      notify:
        - Enable caddy

    - name: Generate Caddyfile
      ansible.builtin.copy:
        dest: /etc/caddy/Caddyfile
        content: |
          {
              email hannes+ffp-caddy-gw{{ gw_number }}@0xef.de
              skip_install_trust
              servers {
                metrics
              }
          }
          http://speed.ffp {
              bind [fdc0:ffee:a10::{{ gw_number }}:0:0] [fdc0:ffee:a10:10:0:{{ gw_number }}::]
              redir http://speedtest.ffp
          }
          http://speedtest.ffp {
              bind [fdc0:ffee:a10::{{ gw_number }}:0:0] [fdc0:ffee:a10:10:0:{{ gw_number }}::]
              reverse_proxy [::1]:8880 127.0.0.1:8880
          }
          http://ipv4.speedtest.ffp {
              bind 10.22.0.{{ gw_number }} 10.22.16.{{ gw_number }}
              reverse_proxy 127.0.0.1:8880
          }
          http://ipv6.speedtest.ffp {
              bind [fdc0:ffee:a10::{{ gw_number }}:0:0] [fdc0:ffee:a10:10:0:{{ gw_number }}::]
              reverse_proxy [::1]:8880
          }
          http://gw{{ gw_number }}-ipv4-backend.speedtest.ffp {
              bind 10.22.0.{{ gw_number }} 10.22.16.{{ gw_number }}
              reverse_proxy 127.0.0.1:8881
          }
          http://gw{{ gw_number }}-ipv6-backend.speedtest.ffp {
              bind [fdc0:ffee:a10::{{ gw_number }}:0:0] [fdc0:ffee:a10:10:0:{{ gw_number }}::]
              reverse_proxy [::1]:8881
          }
          https://gw{{ gw_number }}.freifunk-potsdam.de {
              bind [{{ ansible_default_ipv6.address|default(ansible_all_ipv6_addresses[0]) }}] {{ ansible_default_ipv4.address|default(ansible_all_ipv4_addresses[0]) }}
              @blocked not remote_ip 2603:c020:801d:3900:8a2e:f69b:a8e2:cd76 130.61.102.150
              respond @blocked "Access Denied" 403
              reverse_proxy /metrics/node [::1]:9100
              metrics /metrics/caddy
          }
        owner: root
        group: root
        mode: "0644"
      notify:
        - Reload caddy
    # END: caddy

    # librespeed
    - name: Install podman
      ansible.builtin.package:
        name:
          - podman
          - acl     # beckome_user
        state: present

    - name: Create containers user
      register: containers_user
      ansible.builtin.user:
        name: containers
        shell: /bin/bash
        home: /srv/containers/home

    - name: Run podman migrate
      ansible.builtin.command:
        cmd: "podman system migrate"
      when: containers_user.changed

    - name: Run podman migrate as containers user
      become_user: containers
      ansible.builtin.command:
        cmd: "podman system migrate"
      when: not ansible_check_mode and containers_user.changed

    - name: Check if containers user lingers
      register: linger_containers
      ansible.builtin.stat:
        path: /var/lib/systemd/linger/containers

    - name: Enable linger for user containers
      ansible.builtin.command: loginctl enable-linger containers
      when: not linger_containers.stat.exists

    - name: Check if podman socket exists
      register: containers_podman_socket_stat
      ansible.builtin.stat:
        path: /srv/containers/home/.config/systemd/user/sockets.target.wants/podman.socket

    - name: Enable podman socket for user containers
      become_user: containers
      ansible.builtin.command: systemctl --user enable --now podman.socket
      environment:
        XDG_RUNTIME_DIR: "/run/user/{{ containers_user.uid }}"
      when: not ansible_check_mode and not containers_podman_socket_stat.stat.exists

    - name: Create network for traefik
      become_user: containers
      containers.podman.podman_network:
        name: traefik
        ipv6: true
        subnet: "fd0b:63cf:e421::/64"

    # NOTE: this is needed or it fails, don't know whyâ€¦
    - name: Fix cni version for traefik network
      ansible.builtin.replace:
        path: /srv/containers/home/.config/cni/net.d/traefik.conflist
        regexp: '^(\s+)"cniVersion": "\d+\.\d+\.\d+",\s?$'
        replace: '\1"cniVersion": "0.4.0",'

    - name: Create traefik container
      become_user: containers
      containers.podman.podman_container:
        state: absent
        name: traefik
        image: docker.io/library/traefik:v2.10
        hostname: traefik-gw{{ gw_number }}
        #memory: 512mb
        #memory_swap: 0
        label:
          io.containers.autoupdate: registry
        command:
          #- "--api.insecure=true"
          - "--providers.docker=true"
          - "--providers.docker.exposedbydefault=false"
          - "--entrypoints.web.address=:80"
          - "--entryPoints.web.forwardedHeaders.insecure"
          - "--log.level=DEBUG"
          - "--accesslog=true"
        ports:
          - "8000:80/tcp"
          #- "8080:8080/tcp"
        volume:
          - "/run/user/{{ containers_user.uid }}/podman/podman.sock:/var/run/docker.sock:ro,z"
        network:
          #- "podman:port_handler=slirp4netns"
          - "traefik"
        generate_systemd:
          path: /srv/containers/home/.config/systemd/user
          restart_policy: always
          restart_sec: 30

    - name: Create directory for frontend configuration
      ansible.builtin.file:
        path: /srv/containers/home/containers/librespeed-frontend
        state: directory
        owner: containers
        group: containers
        mode: "0755"

    - name: Create librespeed frontend configuration
      register: librespeed_frontend_config
      ansible.builtin.copy:
        dest: /srv/containers/home/containers/librespeed-frontend/servers.json
        content: "{{ librespeed_frontend_config | to_json }}"
        owner: containers
        group: containers
        mode: "0644"

    - name: Create librespeed frontend container
      become_user: containers
      containers.podman.podman_container:
        force_restart: "{{ librespeed_frontend_config.changed }}"
        name: librespeed-frontend
        image: ghcr.io/librespeed/speedtest:latest
        hostname: librespeed-frontend{{ gw_number }}
        #memory: 512mb
        #memory_swap: 0
        label:
          io.containers.autoupdate: registry
          #traefik.enable: true
          #traefik.http.routers.librespeed-frontend.rule: Host(`speedtest.ffp`)
          #traefik.http.routers.librespeed-frontend.entrypoints: web
        env:
          MODE: frontend
          #TITLE: "LibreSpeed on gw{{ gw_number }}"
          TITLE: "LibreSpeed"
          DISABLE_IPINFO: true
        volume:
          - "/srv/containers/home/containers/librespeed-frontend/servers.json:/servers.json:ro"
        #network: traefik
        #network:
        #  #- "podman:port_handler=slirp4netns"
        #  - "traefik"
        ports:
          - "127.0.0.1:8880:80"
          - "[::1]:8880:80"
        restart_policy:
          - always
        generate_systemd:
          path: /srv/containers/home/.config/systemd/user
          restart_policy: always
          restart_sec: 30

    - name: Create librespeed backend container
      become_user: containers
      containers.podman.podman_container:
        name: librespeed-backend
        image: ghcr.io/librespeed/speedtest:latest
        hostname: librespeed-backend{{ gw_number }}
        #memory: 512mb
        #memory_swap: 0
        label:
          io.containers.autoupdate: registry
          #traefik.enable: true
          #traefik.http.routers.librespeed-backend.rule: Host(`gw{{ gw_number }}-backend.speedtest.ffp`, `gw{{ gw_number }}-ipv4-backend.speedtest.ffp`, `gw{{ gw_number }}-ipv6-backend.speedtest.ffp`)
          #traefik.http.routers.librespeed-backend.entrypoints: web
        env:
          MODE: backend
        #network: traefik
        ports:
          - "127.0.0.1:8881:80"
          - "[::1]:8881:80"
        restart_policy:
          - always
        generate_systemd:
          path: /srv/containers/home/.config/systemd/user
          restart_policy: always
          restart_sec: 30
    # END librespeed

  handlers:
    - name: "Restart systemd-networkd"
      ansible.builtin.systemd:
        service: systemd-networkd
        state: restarted

    - name: "Enable caddy"
      ansible.builtin.systemd_service:
        name: caddy
        enabled: true
        state: started
      when: not ansible_check_mode

    - name: "Reload caddy"
      ansible.builtin.systemd_service:
        name: caddy
        state: reloaded
      when: not ansible_check_mode
